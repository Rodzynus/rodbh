os.loadAPI("/rodbh/rodbhAPI/rodbh")

local tArgs = { ... }
local v = {
	x = 0; y = 0; z = 0;
	xTmp = 0; yTmp = 0; zTmp = 0;
	direction = 1; directionTmp = 1;
	length = nil;
	width = nil;
	height = nil;
	xStart = 1;
	zStart = 1;
	roomType = nil;
	horizontalBool = false;
	verticalBool = true;
	horizontalLengthBool = true;
	recId = nil;
	mode = "nofill";
			--== Message printed when inventory is full ==--
	invMsg = "Skrzynka na rozladunek pelna, czekam na miejsce do rozladunku.";
		--== Message printed when out of fuel ==--
	fuelMsg = "Ludozerka chce cukierka!";
		--== Message printed when bedrock was reached. ==--
	bedrockMsg = "Osiagnieto poziom bedrocka.\nWracam do punktu rozpoczecia pracy.";
		--== Message printed when there's something not diggable and not attackable blocking the path. ==--
	skyMsg = "Napotkalem przeszkode, ktorej nie moge wykopac/zabic, prawdopodobnie osiagnieto maksymalna wysokosc mapy.";
		--== Message printed when resuming program ==--
	continueMsg = "Kontynuuje prace...";
		--== Message printed when successfully finished program. ==--
	endMsg = "Program zakonczony powodzeniem.";
}

local function loadVariables()
	if fs.exists("/rodbh.tmp") then
		local rodbhTmp = io.open("/rodbh.tmp", "r")
		v = textutils.unserialize(rodbhTmp:read("*a"))
		rodbhTmp:close()
		return true
	else
		return false
	end
end

if not loadVariables() then
	--===== Going through table of arguments for part of needed variables =====--
	for i, val in ipairs(tArgs) do
			if val == "left" then v.horizontalBool = false
			elseif val == "right" then v.horizontalBool = true
			elseif val == "up" then v.verticalBool = true
			elseif val == "down" then v.verticalBool = false
			end
	end
	v.length = assert(tonumber(tArgs[1]), "Nieprawidlowa dlugosc pomieszczenia.")
	v.width = assert(tonumber(tArgs[2]), "Nieprawidlowa szerokosc pomieszczenia.") - 1
	v.recId = tonumber(tArgs[3])
	v.roomType = "rexcavate"
	v.startMsg1 = "Kopanie odkrywkowe o wymiarach " .. v.length .. " x " ..  v.width + 1 .. " rozpocznie sie za: "
	v.startMsg2 = "Kopanie odkrywkowe o wymiarach " .. v.length .. " x " ..  v.width + 1 .. " rozpoczete."
end
rodbh.initTable(v)

local function excavate()
	while true do
		for i = v.xStart, v.width + 1 do
			if i ~= v.xStart then 
				rodbh.horizontalFaceFront(true)
				v.xStart = i
				if not rodbh.moveForward() then return true end
			end
			if v.horizontalLengthBool then
				rodbh.faceNorth()
			else
				rodbh.faceSouth()
			end
			for j = v.zStart, v.length - 1 do
				v.zStart = j
				if not rodbh.moveForward() then return true end
			end
			v.zStart = 1
			v.horizontalLengthBool = not v.horizontalLengthBool
		end
		v.xStart = 1
		v.horizontalBool = not v.horizontalBool
		if not rodbh.moveDown() then return true end
	end	
end

local function build()
	term.clear()
	term.setCursorPos(1,1)
	print("Aby przerwac wcisnij Q")
	for i = 5, 1, -1 do
		rodbh.sendAndPrint(v.startMsg1 .. i)
		sleep(1)
		term.setCursorPos(1,3)
		term.clearLine()
		term.setCursorPos(1,2)
		term.clearLine()
	end
	rodbh.sendAndPrint(v.startMsg2)
	
	excavate()
	rodbh.goToStart()
	v.mode = "all"
	rodbh.dumpInv()
	rodbh.sendAndPrint(v.endMsg)
end

local function stop()
	while true do
		id, code = os.pullEvent("key")
		if code == 16 then
			return true
		end
	end
end

--=== Main executing part of the program ===--
if v.recId ~= nil then
	rednet.open("right")
end

parallel.waitForAny(stop, build)
fs.delete("/rodbh.tmp")
