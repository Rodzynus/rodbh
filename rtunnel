os.loadApi("rodbhAPI/rodbh")

local tArgs = { ... }
local v = {
	x = 0; y = 0; z = 0;
	xTmp = 0; yTmp = 0; zTmp = 0;
	direction = 1; directionTmp = 1;
	length = nil;
	width = nil;
	height = nil;
	roomType = nil;
	horizontalBool = false;
	verticalBool = false;
	recId = nil;
	mode = "fill"
			--== Message printed when inventory is full ==--
	invMsg = "Skrzynka na rozladunek pelna, czekam na miejsce do rozladunku.";
		--== Message printed when turtle's lacking building material for filling ==--
	fillMsg = "Brak budulca, wstaw budulec w slot 1 lub do wyznaczonej do tego skrzynki.";
		--== Message printed when out of fuel ==--
	fuelMsg = "Ludozerka chce cukierka!";
		--== Message printed then bedrock was reached. ==--
	bedrockMsg = "Osiagnieto poziom bedrocka.\nWracam do punktu rozpoczecia pracy.";
		--== Message printed when resuming program ==--
	continueMsg = "Kontynuuje prace...";
	endMsg = "Program zakonczony powodzeniem.";
}

--===== Going through table of arguments for part of needed variables =====--
for i, val in ipairs(tArgs) do
		elseif val == "left" then v.horizontalBool = false
		elseif val == "right" then v.horizontalBool = true
		elseif val == "up" then v.verticalBool = false
		elseif val == "down" then v.verticalBool = true
		end
end

rodbh.initTable(v)
rodbh.loadVariables()

v.length = assert(tonumber(tArgs[1]), "Nieprawidlowa dlugosc pomieszczenia.")
v.width = assert(tonumber(tArgs[2]), "Nieprawidlowa szerokosc pomieszczenia.") - 1
v.height = assert(tonumber(tArgs[3]), "Nieprawidlowa wysokosc pomieszczenia.")
v.recId = tonumber(tArgs[4])
v.roomType = "rtunnel"
local xStart, yStart, zStart  = v.x + 1, v.y + 1, v.z + 1

local function tunnel()
	for i = zStart, v.length, 1 do
		if i ~= zStart then rodbh.nextStep() end
		if i == 1 then
			rodbh.horizontalFaceFront(false)
			rodbh.place()
			rodbh.horizontalFaceFront(true)
		end
		
		for j = yStart, v.height, 1 do
			if j > yStart then rodbh.nextLayer(true) end
			rodbh.horizontalFaceFront(true)
			
			for k = xStart, v.width, 1 do
				if math.abs(v.y) == 0 then
					rodbh.placeDown()
				elseif math.abs(v.y) == v.height-1 then
					rodbh.placeUp()
				end
				if math.abs(v.x) < v.width then
					rodbh.moveForward()
				else
					rodbh.place()
					if math.abs(v.y) == 0 then
						rodbh.placeDown()
					elseif math.abs(v.y) == v.height-1 then
						rodbh.placeUp()
					end
				end
			end
			xStart = 1
		end
		yStart = 1
	end
end

local function build()
	print ("Aby przerwac wcisnij Q")
	local cursorX, cursorY = term.getCursorPos()
	local termSizeX, termSizeY = term.getSize()
	for i = 5, 1, -1 do
		term.setCursorPos(1,cursorY)
		for j = cursorY, termSizeY do
			term.clearLine()
		end
		print ("Kopanie tunelu o wymiarach " .. v.length .. " x " ..  v.width + 1 .. " x " .. v.height .. " rozpocznie sie za: " .. i)
		sleep(1)
	end
	cursorX, cursorY = term.getCursorPos()
	term.setCursorPos(1,cursorY)
	for j = cursorY, termSizeY do
		term.clearLine()
	end
	
	tunnel()
	rodbh.goToStart()
	v.mode = "all"
	rodbh.dumpInv()
	rodbh.sendAndPrint(endMsg)
end

local function stop()
	while true do
		id, code = os.pullEvent("key")
		if code == 16 then
			return true
		end
	end
end

--=== Main executing part of the program ===--
if v.recId ~= nil then
	rednet.open("right")
end

parallel.waitForAny(stop, build)
fs.delete("rodbhPos.tmp")

end
